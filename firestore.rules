/**
 * @fileoverview Firestore Security Rules for NƒÅgaPatha game.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user-specific data (profiles, scores, game sessions)
 * and allows public read access to the global leaderboard while restricting write access. Administrative
 * privileges can be granted via the `roles_admin` collection. The rules are designed to prevent
 * unauthorized data access and modification, ensure data consistency, and optimize query performance.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, where {userId} matches the Firebase Auth UID.
 * - /users/{userId}/scores/{scoreId}: User-specific scores.
 * - /users/{userId}/game_sessions/{gameSessionId}: User-specific game session data.
 * - /leaderboard/{scoreId}: Global leaderboard scores.
 * - /roles_admin/{userId}: Admin role assignments.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user.
 * - The leaderboard is publicly readable but only writable with valid `request.auth`.
 * - Listing user collections (scores, game_sessions) is only allowed by the owner.
 * - Admin privileges are granted by the existence of a document in the `roles_admin` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles based on ownership.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get, update, delete) User with UID 'user123' can read/write their profile if request.auth.uid == 'user123'.
     * @deny (create) User with UID 'user456' cannot create a profile for 'user123'.
     * @deny (get, update, delete) User with UID 'user456' cannot read/write 'user123' profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Grants access to user-specific score entries based on ownership.
     * @path /users/{userId}/scores/{scoreId}
     * @allow (create) User with UID 'user123' can create a score entry under their profile.
     * @allow (get, update, delete) User with UID 'user123' can read/write their score entries.
     * @allow (list) User with UID 'user123' can list their score entries.
     * @deny (create) User with UID 'user456' cannot create a score entry under 'user123' profile.
     * @deny (get, update, delete) User with UID 'user456' cannot read/write 'user123' score entries.
     * @principle Enforces document ownership for score entries.
     */
    match /users/{userId}/scores/{scoreId} {
        function isOwner(userId) {
          return request.auth != null && request.auth.uid == userId;
        }
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }

    /**
     * @description Grants access to user-specific game session data based on ownership.
     * @path /users/{userId}/game_sessions/{gameSessionId}
     * @allow (create) User with UID 'user123' can create a game session entry under their profile.
     * @allow (get, update, delete) User with UID 'user123' can read/write their game session entries.
     * @allow (list) User with UID 'user123' can list their game session entries.
     * @deny (create) User with UID 'user456' cannot create a game session entry under 'user123' profile.
     * @deny (get, update, delete) User with UID 'user456' cannot read/write 'user123' game session entries.
     * @principle Enforces document ownership for game session data.
     */
    match /users/{userId}/game_sessions/{gameSessionId} {
        function isOwner(userId) {
          return request.auth != null && request.auth.uid == userId;
        }
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }

    /**
     * @description Grants public read access to the leaderboard and restricts write access to authenticated users.
     * @path /leaderboard/{scoreId}
     * @allow (get, list) Any user (authenticated or not) can read the leaderboard.
     * @allow (create) Authenticated user can create an entry. Must provide a playerName.
     * @deny (create) If request.auth is null (user is not authenticated).
     * @deny (update, delete) Any user (even authenticated) cannot update or delete leaderboard entries.
     * @principle Allows public read access while restricting writes to authenticated users only.
     */
    match /leaderboard/{scoreId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn();
        allow update, delete: if false;
    }

    /**
     * @description Grants admin privileges to users with a document in this collection.
     * @path /roles_admin/{userId}
     * @allow (get) Any user can check if they have admin privileges (for UI purposes).
     * @allow (create) Only a privileged process (e.g., a Firebase Function) can assign admin roles.
     * @deny (list, update, delete) Listing, updating, or deleting admin roles is prohibited via client-side rules.
     * @principle Grants administrative privileges based on document presence in the /roles_admin collection.
     */
    match /roles_admin/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}